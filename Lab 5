Q1 Write a C program to convert an infix expression to a postfix expression. The input and the output of
the function are character strings. The input expression contains only four possible operators: +, -, *
and /. Operands can be any alphanumeric. Each operand is represented by a character symbol. The
parentheses are allowed in the input expression. You may assume that the expression is always valid.

void in2Post ( char * infix , char * postfix )


void in2Post(char* infix, char* postfix)
{
    Stack s;
    s.head = NULL;
    s.size = 0;
    int i = 0;
    int y = 0;
    int op1;

    while(infix[i] != '\0')
    {
        if((infix[i] >= 65 && infix[i] <= 90) || (infix[i] >= 97 && infix[i] <= 122) || (infix[i] >= 49 && infix[i] <= 57))
        {
            postfix[y] = infix[i];
            y++;
        }
        else if(infix[i] == '(')
            push(&s , infix[i]);
            
        else if(infix[i] == ')')
        {
            while(peek(s) != '(')
            {
                op1 = peek(s);
                postfix[y] = op1;
                y++;
                pop(&s);
            }
            pop(&s);
        }
        else
        {
            while(!isEmptyStack(s) && peek(s) != '(' && precedence(peek(s) , infix[i]))
            {
                op1 = peek(s);
                postfix[y] = op1;
                y++;
                pop(&s);
            }
            push(&s , infix[i]);
        }

        i++;
    }
    while(!isEmptyStack(s))
    {
        op1 = peek(s);
        postfix[y] = op1;
        y++;
        pop(&s);
    }
}
